[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quillix-scraper"
version = "0.1.0"
description = "A modular and extensible web scraper for tech trends"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Yash Yogesh Potdar", email = "yashyogeshpotdar7@gmail.com"}
]
maintainers = [
    {name = "Yash Yogesh Potdar", email = "ashyogeshpotdar7@gmail.com"}
]
keywords = ["web-scraping", "tech-trends", "news", "data-extraction", "redis", "modular"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "redis>=4.3.0",
    "click>=8.0.0",
    "python-dotenv>=0.19.0",
]

[project.optional-dependencies]
async = [
    "httpx>=0.24.0",
    "aioredis>=2.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]
all = [
    "quillix-scraper[async,dev]"
]

[project.urls]
Homepage = "https://github.com/quillix/quillix-scraper"
Documentation = "https://github.com/quillix/quillix-scraper#readme"
Repository = "https://github.com/quillix/quillix-scraper.git"
Issues = "https://github.com/quillix/quillix-scraper/issues"
Changelog = "https://github.com/quillix/quillix-scraper/blob/main/CHANGELOG.md"

[project.scripts]
quillix-scraper = "quillix_scraper.cli:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["quillix_scraper*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
quillix_scraper = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["quillix_scraper"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "aioredis.*",
    "bs4.*",
    "requests.*",
]
ignore_missing_imports = true